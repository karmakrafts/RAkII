/*
 * Copyright 2025 Karma Krafts & associates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:JvmName("Drop$")

package dev.karmakrafts.rakii

import kotlin.jvm.JvmName

/**
 * Marker interface for droppable objects in the RAkII resource management system.
 *
 * Droppable objects may be used like regular [AutoCloseable] objects,
 * except that they also provide a generated [drop] function, which
 * should never be invoked directly and which is used internally by the RAkII compiler plugin.
 *
 * Classes implementing this interface will have their resource cleanup code automatically
 * generated by the RAkII compiler plugin, ensuring proper resource management.
 */
interface Drop : AutoCloseable {
    /**
     * Drop all droppable member fields of the class which
     * implements this interface/trait.
     * **This should not be overridden unless the implementing
     * class is marked with the [SkipDropTransforms] annotation!**
     */
    @GeneratedDropApi
    fun drop() {
        throw UnsupportedOperationException("RAkII drop function wasn't lowered during IR transformation")
    }

    @OptIn(GeneratedDropApi::class)
    override fun close() = drop()
}
